-- ðŸ“š SQL TABLE CREATION SCRIPTS FOR LIBRARY SYSTEM (Oracle SQL)

-- BOOKS TABLE
CREATE TABLE books (
  isbn VARCHAR2(13) PRIMARY KEY,
  title VARCHAR2(100),
  author VARCHAR2(100),
  genre VARCHAR2(50),
  pub_year DATE,
  available NUMBER(1) DEFAULT 1
);

-- PATRONS TABLE (MEMBERS)
CREATE TABLE patrons (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100),
  address VARCHAR2(200),
  phone VARCHAR2(20),
  email VARCHAR2(100),
  membership_no VARCHAR2(50) UNIQUE
);

-- STAFF TABLE 
CREATE TABLE staff (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100),
  position VARCHAR2(50),
  phone VARCHAR2(20),
  email VARCHAR2(100),
  hire_date DATE
);

-- USERS TABLE
CREATE TABLE users (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR2(50) UNIQUE NOT NULL,
  password VARCHAR2(100) NOT NULL,
  role VARCHAR2(20) DEFAULT 'patron' --- 'admin', 'staff', 'patron
);

-- LOANS TABLE
CREATE TABLE loans (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  book_id VARCHAR2(13) REFERENCES books(isbn),
  patron_id NUMBER REFERENCES patrons(id),
  loan_date DATE,
  due_date DATE,
  return_date DATE,
  status VARCHAR2(20) DEFAULT 'LOANED'
);

-- ACTIVITY LOG TABLE (optional for tracking changes)
CREATE TABLE activity_log (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  action_type VARCHAR2(50),
  entity VARCHAR2(50),
  entity_id VARCHAR2(50),
  action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- OVERDUE REPORT VIEW (for reporting)
CREATE OR REPLACE VIEW overdue_books AS
SELECT l.id AS loan_id, b.title, p.name AS patron, l.due_date,
       (SYSDATE - l.due_date) AS days_overdue,
       CASE WHEN l.return_date IS NULL AND l.due_date < SYSDATE THEN 'YES' ELSE 'NO' END AS is_overdue
FROM loans l
JOIN books b ON l.book_id = b.isbn
JOIN patrons p ON l.patron_id = p.id
WHERE l.status = 'LOANED' AND l.due_date < SYSDATE;

-- MOST BORROWED BOOKS REPORT
CREATE OR REPLACE VIEW most_borrowed_books AS
SELECT b.title, COUNT(*) AS borrow_count
FROM loans l
JOIN books b ON l.book_id = b.isbn
GROUP BY b.title
ORDER BY borrow_count DESC;


CREATE TABLE lms_users (
    id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username   VARCHAR2(50) UNIQUE NOT NULL,
    password   VARCHAR2(200)       NOT NULL,  -- bcrypt hash
    role       VARCHAR2(20) DEFAULT 'patron',
    member_id  NUMBER,

    CONSTRAINT fk_users_member
        FOREIGN KEY (member_id)
        REFERENCES lms_members (member_id)
        ON DELETE CASCADE
);
-- Patron users
INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('admin1', 'adminpass', 'patron', 1);

INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('admin2', 'adminpass', 'patron', 2);

=
INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('staff1', 'staffpass','patron',3);

INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('staff2', 'staffpass',  'patron',4);


INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('patron1', 'userpass1',  'patron',5);

INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('patron2', 'userpass2',  'patron',6);

INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('patron3', 'userpass3', 'patron',7);

INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('patron4', 'userpass4',  'patron', 8);

INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('patron5', 'userpass5', 'patron',9 );

INSERT INTO lms_users (username, password,  role, member_id)
VALUES ('patron6', 'userpass6','patron', 10);

--INSERT 

INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Learning SQL', 'Alan Beaulieu', 1, '9780596520830', 2009);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Database Systems', 'Thomas Connolly', 2, '9780132943260', 2015);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Modern Operating Systems', 'Andrew Tanenbaum', 3, '9780133591620', 2014);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Java: The Complete Reference', 'Herbert Schildt', 4, '9780071808552', 2018);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Clean Code', 'Robert C. Martin', 5, '9780132350884', 2008);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Artificial Intelligence', 'Stuart Russell', 6, '9780136042594', 2010);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Introduction to Algorithms', 'Thomas H. Cormen', 7, '9780262033848', 2009);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Python Crash Course', 'Eric Matthes', 8, '9781593276034', 2015);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('Head First Design Patterns', 'Eric Freeman', 9, '9780596007126', 2004);
INSERT INTO lms_books (title, author, publisher_id, isbn, pub_year) VALUES ('The Pragmatic Programmer', 'Andy Hunt', 10, '9780201616224', 1999);

-