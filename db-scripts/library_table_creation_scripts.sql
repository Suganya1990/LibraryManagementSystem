-- ðŸ“š SQL TABLE CREATION SCRIPTS FOR LIBRARY SYSTEM (Oracle SQL)

-- BOOKS TABLE
CREATE TABLE books (
  isbn VARCHAR2(13) PRIMARY KEY,
  title VARCHAR2(100),
  author VARCHAR2(100),
  genre VARCHAR2(50),
  pub_year NUMBER(4),
  available NUMBER(1) DEFAULT 1
);

-- PATRONS TABLE (MEMBERS)
CREATE TABLE patrons (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100),
  address VARCHAR2(200),
  phone VARCHAR2(20),
  email VARCHAR2(100),
  membership_no VARCHAR2(50) UNIQUE
);
-- Users Table

CREATE TABLE users (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR2(50) UNIQUE NOT NULL,
  password VARCHAR2(100) NOT NULL,
  role VARCHAR2(20) DEFAULT 'patron' --- 'admin', 'staff', 'patron
);

-- LOANS TABLE
CREATE TABLE loans (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  book_id VARCHAR2(13) REFERENCES books(isbn),
  patron_id NUMBER REFERENCES patrons(id),
  loan_date DATE,
  due_date DATE,
  return_date DATE,
  status VARCHAR2(20) DEFAULT 'LOANED'
);

-- ACTIVITY LOG TABLE (optional for tracking changes)
CREATE TABLE activity_log (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  action_type VARCHAR2(50),
  entity VARCHAR2(50),
  entity_id VARCHAR2(50),
  action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- OVERDUE REPORT VIEW (for reporting)
CREATE OR REPLACE VIEW overdue_books AS
SELECT l.id AS loan_id, b.title, p.name AS patron, l.due_date,
       (SYSDATE - l.due_date) AS days_overdue,
       CASE WHEN l.return_date IS NULL AND l.due_date < SYSDATE THEN 'YES' ELSE 'NO' END AS is_overdue
FROM loans l
JOIN books b ON l.book_id = b.isbn
JOIN patrons p ON l.patron_id = p.id
WHERE l.status = 'LOANED' AND l.due_date < SYSDATE;

-- MOST BORROWED BOOKS REPORT
CREATE OR REPLACE VIEW most_borrowed_books AS
SELECT b.title, COUNT(*) AS borrow_count
FROM loans l
JOIN books b ON l.book_id = b.isbn
GROUP BY b.title
ORDER BY borrow_count DESC;